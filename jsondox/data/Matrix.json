{
	"author": "Zeta Ret",
	"description": "rectangular array matrix",
	"text": "MxN matrix data object with adjacent mathematical methods and transformations",
	"requires": "protoss.all.js",
	"version": "1.03",
	"date": "2017 - Today",
	"supername": "zetaret.global.packages.clockwork.data::Matrix",
	"inherits": null,
	"interfaces": null,
	"static": {
		"public_properties": {},
		"protected_properties": {},
		"private_properties": {},
		"public_methods": {},
		"protected_methods": {},
		"private_methods": {}
	},
	"public_properties": {
		"rows": "Number: rows",
		"columns": "Number: columns||rows",
		"data": "Array: null"
	},
	"protected_properties": {},
	"private_properties": {},
	"public_methods": {
		"Matrix": "rows*: Number, columns: Number",
		"setDimensions": "rows*: Number, columns: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"getAt": "row*: Number, column*: Number; return Number",
		"fill": "n*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"rnd": "; return zetaret.global.packages.clockwork.data::Matrix",
		"identity": "i: Number, j: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"toSquareMatrix": "n: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"expand": "n*: Number, bottom: Number, left: Number, top: Number, right: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"shrink": "bottom: Number, left: Number, top: Number, right: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"op": "v*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"scalar": "s*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"scalarF": "s*:Number, f*:Function; return zetaret.global.packages.clockwork.data::Matrix",
		"invert": "; return zetaret.global.packages.clockwork.data::Matrix",
		"diagonal": "n*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"upper": "n*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"lower": "n*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"reflect": "rx: Boolean, ry: Boolean, keep: Boolean; return zetaret.global.packages.clockwork.data::Matrix",
		"skew": "rot*: Number, n: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"shear": "rot*: Number, n: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"translate": "x: Number, y: Number, keep: Boolean; return zetaret.global.packages.clockwork.data::Matrix",
		"add": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"subtract": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"multiply": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"divide": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"squareMultiply": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"power": "n*: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"transpose": "; return zetaret.global.packages.clockwork.data::Matrix",
		"transpose2": "keep: Boolean; return zetaret.global.packages.clockwork.data::Matrix",
		"transform": "f*: Function, mode: Number, t: Object; return zetaret.global.packages.clockwork.data::Matrix",
		"rank": "; return Number",
		"det": "; return Number",
		"determinant": "; return Number",
		"adjugate": "; return zetaret.global.packages.clockwork.data::Matrix",
		"trace": "; return Number",
		"copy": "v*: zetaret.global.packages.clockwork.data.Matrix; return zetaret.global.packages.clockwork.data::Matrix",
		"copy2": "v*: zetaret.global.packages.clockwork.data.Matrix, x: Number, y: Number, vx: Number, vy: Number, vcl: Number, vrl: Number; return zetaret.global.packages.clockwork.data::Matrix",
		"equals": "v*: zetaret.global.packages.clockwork.data.Matrix; return Boolean",
		"clone": "; return zetaret.global.packages.clockwork.data::Matrix"
	},
	"protected_methods": {},
	"private_methods": {},
	"static_descriptions": {},
	"descriptions": {
		"rows": "",
		"Matrix": {
			"this": "",
			"return": ""
		}
	},
	"static_examples": {},
	"examples": {}
}